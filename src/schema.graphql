input AddToQuestionHasAnswerAnswerInput {
  questionQuestionId: ID!
  correctAnswerId: ID!
  clientMutationId: String!
}

input AddToQuestionHasOptionsOptionInput {
  questionQuestionId: ID!
  wrongOptionId: ID!
  clientMutationId: String!
}

type AddToQuestionHasOptionsPayload {
  viewer: Viewer!
  clientMutationId: String!
  wrongOption: Option
  questionQuestion: Question
  wrongOptionEdge: OptionEdge
  questionQuestionEdge: QuestionEdge
}

type Answer implements Node {
  text: String!
  id: ID!
  question(filter: QuestionFilter): Question!
}

"""A connection to a list of items."""
type AnswerConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AnswerEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type AnswerEdge {
  """The item at the end of the edge."""
  node: Answer!

  """A cursor for use in pagination."""
  cursor: String!
}

input AnswerFilter {
  """Logical AND on all given filters."""
  AND: [AnswerFilter!]

  """Logical OR on all given filters."""
  OR: [AnswerFilter!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  question: QuestionFilter
}

enum AnswerOrderBy {
  text_ASC
  text_DESC
  id_ASC
  id_DESC
}

input AnswerquestionQuestion {
  text: String!
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
}

input CreateAnswer {
  text: String!
  questionId: ID
  question: AnswerquestionQuestion
}

input CreateAnswerInput {
  text: String!
  questionId: ID
  question: AnswerquestionQuestion
  clientMutationId: String!
}

type CreateAnswerPayload {
  viewer: Viewer!
  clientMutationId: String!
  answer: Answer
  edge: AnswerEdge
  question: Question
}

input CreateOption {
  weight: Float!
  text: String!
  questionId: ID
  question: OptionquestionQuestion
}

input CreateOptionInput {
  weight: Float!
  text: String!
  questionId: ID
  question: OptionquestionQuestion
  clientMutationId: String!
}

type CreateOptionPayload {
  viewer: Viewer!
  clientMutationId: String!
  option: Option
  edge: OptionEdge
  question: Question
}

input CreateQuestion {
  text: String!
  correctId: ID
  correct: QuestioncorrectAnswer
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
}

input CreateQuestionInput {
  text: String!
  correctId: ID
  correct: QuestioncorrectAnswer
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
  clientMutationId: String!
}

type CreateQuestionPayload {
  viewer: Viewer!
  clientMutationId: String!
  question: Question
  edge: QuestionEdge
  correct: Answer
}

input DeleteAnswerInput {
  id: ID!
  clientMutationId: String!
}

type DeleteAnswerPayload {
  viewer: Viewer!
  clientMutationId: String!
  answer: Answer
  edge: AnswerEdge
  question: Question
  deletedId: ID
}

input DeleteOptionInput {
  id: ID!
  clientMutationId: String!
}

type DeleteOptionPayload {
  viewer: Viewer!
  clientMutationId: String!
  option: Option
  edge: OptionEdge
  question: Question
  deletedId: ID
}

input DeleteQuestionInput {
  id: ID!
  clientMutationId: String!
}

type DeleteQuestionPayload {
  viewer: Viewer!
  clientMutationId: String!
  question: Question
  edge: QuestionEdge
  correct: Answer
  deletedId: ID
}

type Mutation {
  createAnswer(input: CreateAnswerInput!): CreateAnswerPayload
  createOption(input: CreateOptionInput!): CreateOptionPayload
  createQuestion(input: CreateQuestionInput!): CreateQuestionPayload
  updateAnswer(input: UpdateAnswerInput!): UpdateAnswerPayload
  updateOption(input: UpdateOptionInput!): UpdateOptionPayload
  updateQuestion(input: UpdateQuestionInput!): UpdateQuestionPayload
  updateOrCreateAnswer(input: UpdateOrCreateAnswerInput!): UpdateOrCreateAnswerPayload
  updateOrCreateOption(input: UpdateOrCreateOptionInput!): UpdateOrCreateOptionPayload
  updateOrCreateQuestion(input: UpdateOrCreateQuestionInput!): UpdateOrCreateQuestionPayload
  deleteAnswer(input: DeleteAnswerInput!): DeleteAnswerPayload
  deleteOption(input: DeleteOptionInput!): DeleteOptionPayload
  deleteQuestion(input: DeleteQuestionInput!): DeleteQuestionPayload
  setQuestionHasAnswer(input: AddToQuestionHasAnswerAnswerInput!): SetQuestionHasAnswerPayload
  addToQuestionHasOptions(input: AddToQuestionHasOptionsOptionInput!): AddToQuestionHasOptionsPayload
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

type Option implements Node {
  weight: Float!
  text: String!
  id: ID!
  question(filter: QuestionFilter): Question!
}

"""A connection to a list of items."""
type OptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [OptionEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

"""An edge in a connection."""
type OptionEdge {
  """The item at the end of the edge."""
  node: Option!

  """A cursor for use in pagination."""
  cursor: String!
}

input OptionFilter {
  """Logical AND on all given filters."""
  AND: [OptionFilter!]

  """Logical OR on all given filters."""
  OR: [OptionFilter!]
  weight: Float

  """All values that are not equal to given value."""
  weight_not: Float

  """All values that are contained in given list."""
  weight_in: [Float!]

  """All values that are not contained in given list."""
  weight_not_in: [Float!]

  """All values less than the given value."""
  weight_lt: Float

  """All values less than or equal the given value."""
  weight_lte: Float

  """All values greater than the given value."""
  weight_gt: Float

  """All values greater than or equal the given value."""
  weight_gte: Float
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  question: QuestionFilter
}

enum OptionOrderBy {
  weight_ASC
  weight_DESC
  text_ASC
  text_DESC
  id_ASC
  id_DESC
}

input OptionquestionQuestion {
  text: String!
  correctId: ID
  correct: QuestioncorrectAnswer
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Query {
  viewer: Viewer!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Question implements Node {
  text: String!
  id: ID!
  correct(filter: AnswerFilter): Answer!
  wrong(filter: OptionFilter, orderBy: OptionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection
}

"""A connection to a list of items."""
type QuestionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [QuestionEdge]

  """Count of filtered result set without considering pagination arguments"""
  count: Int!
}

input QuestioncorrectAnswer {
  text: String!
}

"""An edge in a connection."""
type QuestionEdge {
  """The item at the end of the edge."""
  node: Question!

  """A cursor for use in pagination."""
  cursor: String!
}

input QuestionFilter {
  """Logical AND on all given filters."""
  AND: [QuestionFilter!]

  """Logical OR on all given filters."""
  OR: [QuestionFilter!]
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  correct: AnswerFilter
  wrong_every: OptionFilter
  wrong_some: OptionFilter
  wrong_none: OptionFilter
}

enum QuestionOrderBy {
  text_ASC
  text_DESC
  id_ASC
  id_DESC
}

input QuestionwrongOption {
  weight: Float!
  text: String!
}

type SetQuestionHasAnswerPayload {
  viewer: Viewer!
  clientMutationId: String!
  correctAnswer: Answer
  questionQuestion: Question
  correctAnswerEdge: AnswerEdge
  questionQuestionEdge: QuestionEdge
}

input UpdateAnswer {
  text: String
  id: ID!
  questionId: ID
  question: AnswerquestionQuestion
}

input UpdateAnswerInput {
  text: String
  id: ID!
  questionId: ID
  question: AnswerquestionQuestion
  clientMutationId: String!
}

type UpdateAnswerPayload {
  viewer: Viewer!
  clientMutationId: String!
  answer: Answer
  edge: AnswerEdge
  question: Question
}

input UpdateOption {
  weight: Float
  text: String
  id: ID!
  questionId: ID
  question: OptionquestionQuestion
}

input UpdateOptionInput {
  weight: Float
  text: String
  id: ID!
  questionId: ID
  question: OptionquestionQuestion
  clientMutationId: String!
}

type UpdateOptionPayload {
  viewer: Viewer!
  clientMutationId: String!
  option: Option
  edge: OptionEdge
  question: Question
}

input UpdateOrCreateAnswerInput {
  update: UpdateAnswer!
  create: CreateAnswer!
  clientMutationId: String!
}

type UpdateOrCreateAnswerPayload {
  viewer: Viewer!
  clientMutationId: String!
  answer: Answer
  edge: AnswerEdge
  question: Question
}

input UpdateOrCreateOptionInput {
  update: UpdateOption!
  create: CreateOption!
  clientMutationId: String!
}

type UpdateOrCreateOptionPayload {
  viewer: Viewer!
  clientMutationId: String!
  option: Option
  edge: OptionEdge
  question: Question
}

input UpdateOrCreateQuestionInput {
  update: UpdateQuestion!
  create: CreateQuestion!
  clientMutationId: String!
}

type UpdateOrCreateQuestionPayload {
  viewer: Viewer!
  clientMutationId: String!
  question: Question
  edge: QuestionEdge
  correct: Answer
}

input UpdateQuestion {
  text: String
  id: ID!
  correctId: ID
  correct: QuestioncorrectAnswer
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
}

input UpdateQuestionInput {
  text: String
  id: ID!
  correctId: ID
  correct: QuestioncorrectAnswer
  wrongIds: [ID!]
  wrong: [QuestionwrongOption!]
  clientMutationId: String!
}

type UpdateQuestionPayload {
  viewer: Viewer!
  clientMutationId: String!
  question: Question
  edge: QuestionEdge
  correct: Answer
}

"""This is the famous Relay viewer object"""
type Viewer {
  allAnswers(filter: AnswerFilter, orderBy: AnswerOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): AnswerConnection!
  allOptions(filter: OptionFilter, orderBy: OptionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): OptionConnection!
  allQuestions(filter: QuestionFilter, orderBy: QuestionOrderBy, skip: Int, after: String, before: String, first: Int, last: Int): QuestionConnection!
  Answer(id: ID): Answer
  Option(id: ID): Option
  Question(id: ID): Question
  id: ID!
}

